<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ output extension=".cs" #>
<# 


/*********************************************************************
					- DECLARATION -
**********************************************************************/ 

// This needs to be set to the .edmx file that you want to process.
string edmxFile = @"..\entity model\DatabaseContext.edmx"; 
CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
MetadataTools ef = new MetadataTools(this);

EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(edmxFile);
EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

#>
<# 


/*********************************************************************
					- TEMPLATE CODE -
**********************************************************************/ 

foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
    fileManager.StartNewFile(code.Escape(entity) + "BLL.Generated.cs"); 
	
	var primaryKey = entity.KeyMembers[0];
	
	string entitySetName = null;
	
	foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>())
        {
			if (entity.Name == entitySet.ElementType.Name)
			{
				entitySetName = entitySet.Name;
				break;
			}
		}
	
#>
//------------------------------------------------------------------------------
// <auto-generated>
//
// ***************** Copyright Notice *****************
// 
// This code is licensed under Microsoft Public License (Ms-PL). 
// You are free to use, modify and distribute any portion of this code. 
// The only requirement to do that, you need to keep the developer name, as provided below to recognize and encourage original work:
//
// =======================================================
//   
// Architecture Designed and Implemented By:
// Mohammad Ashraful Alam
// Microsoft Most Valuable Professional, ASP.NET 2007 – 2011
// Twitter: http://twitter.com/AshrafulAlam | Blog: http://blog.ashraful.net | Portfolio: http://www.ashraful.net
//   
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic;
using Eisk.BusinessEntities;
using Eisk.DataAccessLayer;
using Eisk.Helpers;

namespace Eisk.BusinessLogicLayer
{   
	[System.ComponentModel.DataObject(true)]
	<#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#>partial class <#=entity.Name#>BLL:IDisposable
	{
		#region Constructors, Dependency and Partial Method Declaration

        public <#=entity.Name#>BLL() : this(new DatabaseContext()) { }

        public <#=entity.Name#>BLL(DatabaseContext DatabaseContext)
        {
            _DatabaseContext = DatabaseContext;
        }

        DatabaseContext _DatabaseContext;

        public void Dispose()
        {
            if (_DatabaseContext != null)
            {
                _DatabaseContext.Dispose();
                _DatabaseContext = null;
            }
            
            GC.SuppressFinalize(this);
        }

        partial void On<#=entity.Name#>Saving(<#=entity.Name#> <#=code.CamelCase(entity.Name)#>);

        partial void On<#=entity.Name#>Creating(<#=entity.Name#> <#=code.CamelCase(entity.Name)#>);
        partial void On<#=entity.Name#>Created(<#=entity.Name#> <#=code.CamelCase(entity.Name)#>);

        partial void On<#=entity.Name#>Updating(<#=entity.Name#> <#=code.CamelCase(entity.Name)#>);
        partial void On<#=entity.Name#>Updated(<#=entity.Name#> <#=code.CamelCase(entity.Name)#>);

        partial void On<#=entity.Name#>Saved(<#=entity.Name#> <#=code.CamelCase(entity.Name)#>);

        partial void On<#=entity.Name#>Deleting(<#=entity.Name#> <#=code.CamelCase(entity.Name)#>);
        partial void On<#=entity.Name#>Deleted(<#=entity.Name#> <#=code.CamelCase(entity.Name)#>);


        #endregion

        #region Get Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public <#=entity.Name#> Get<#=entity.Name#>By<#=code.Escape(primaryKey.Name)#>(<#= GetPrimitiveType (primaryKey.TypeUsage.EdmType.Name) #> <#=code.CamelCase(primaryKey.Name)#>)
        {
            //Validate Input
            if (<#=code.CamelCase(primaryKey.Name)#>.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("<#=code.CamelCase(primaryKey.Name)#>");
            return (_DatabaseContext.<#=entitySetName#>.FirstOrDefault(<#=code.CamelCase(entity.Name)#> => <#=code.CamelCase(entity.Name)#>.<#=primaryKey.Name#> == <#=code.CamelCase(primaryKey.Name)#>));
        }
			
		<# 
		
		//************************* data generation related to foreign key starts ******************************
		
		foreach (var entityMember in entity.NavigationProperties) 
		foreach (System.Data.Metadata.Edm.EdmProperty foreignKey in entityMember.GetDependentProperties())
		{
			//skip the foreign key related methods for one-to-one mapping
			if (primaryKey == foreignKey) continue;

		#>
[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<<#=entity.Name#>> Get<#=entitySetName#>By<#=foreignKey.Name#>(<#= GetPrimitiveType (foreignKey) #> <#=code.CamelCase(foreignKey.Name)#>)
        {
            //Validate Input
            if (<#=code.CamelCase(foreignKey.Name)#>.IsEmpty())
                return GetAll<#=entitySetName#>();
 
            return (from <#=code.CamelCase(entity.Name)#> in _DatabaseContext.<#=entitySetName#>
                    where <#=code.CamelCase(foreignKey.Name)#> == null ? <#=code.CamelCase(entity.Name)#>.<#=foreignKey.Name#> == null : <#=code.CamelCase(entity.Name)#>.<#=code.Escape(foreignKey.Name)#> == <#=code.CamelCase(foreignKey.Name)#>
                    select <#=code.CamelCase(entity.Name)#>).ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<<#=entity.Name#>> Get<#=entitySetName#>By<#=foreignKey.Name#>Paged(<#= GetPrimitiveType (foreignKey) #> <#=code.CamelCase(foreignKey.Name)#>, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (<#=code.CamelCase(foreignKey.Name)#>.IsEmpty())
                return GetAll<#=entitySetName#>Paged(orderBy, startRowIndex, maximumRows);

            if (string.IsNullOrEmpty(orderBy))
                orderBy = "<#=primaryKey.Name#>";
            
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
				
            return (
                    from <#=code.CamelCase(entity.Name)#> in
                        _DatabaseContext.<#=entitySetName#>
                        .DynamicOrderBy(orderBy)
                    where <#=code.CamelCase(foreignKey.Name)#> == null ? <#=code.CamelCase(entity.Name)#>.<#=foreignKey.Name#> == null : <#=code.CamelCase(entity.Name)#>.<#=code.Escape(foreignKey.Name)#> == <#=code.CamelCase(foreignKey.Name)#>
                    select <#=code.CamelCase(entity.Name)#>
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAll<#=entitySetName#>By<#=code.Escape(foreignKey.Name)#>(<#= GetPrimitiveType (foreignKey) #> <#=code.CamelCase(foreignKey.Name)#>, string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            //Validate Input
            if (<#=code.CamelCase(foreignKey.Name)#>.IsEmpty())
                return GetTotalCountForAll<#=entitySetName#>(orderBy, startRowIndex, maximumRows);
			
            return _DatabaseContext.<#=entitySetName#>.Count(<#=code.CamelCase(entity.Name)#> => <#=code.CamelCase(foreignKey.Name)#> == null ? <#=code.CamelCase(entity.Name)#>.<#=code.Escape(foreignKey.Name)#> == null : <#=code.CamelCase(entity.Name)#>.<#=code.Escape(foreignKey.Name)#> == <#=code.CamelCase(foreignKey.Name)#>);
        }
			
		<# 
		
		} 
		
		// ************************************ data generation related to foreign key ends *********************
		
		#>
		
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<<#=entity.Name#>> GetAll<#=entitySetName#>()
        {
            return _DatabaseContext.<#=entitySetName#>.ToList();
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public List<<#=entity.Name#>> GetAll<#=entitySetName#>Paged(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            if (string.IsNullOrEmpty(orderBy))
                orderBy = "<#=code.Escape(primaryKey.Name)#>";
				
			if (startRowIndex < 0) 
				throw (new ArgumentOutOfRangeException("startRowIndex"));
				
			if (maximumRows < 0) 
				throw (new ArgumentOutOfRangeException("maximumRows"));
			
            return (
                    from <#=code.CamelCase(entity.Name)#> in 
                        _DatabaseContext.<#=entitySetName#>
                        .DynamicOrderBy(orderBy)
                    select <#=code.CamelCase(entity.Name)#>
                    )
                    .Skip(startRowIndex)
                    .Take(maximumRows)
                    .ToList();
        }

        public int GetTotalCountForAll<#=entitySetName#>(string orderBy = default(string), int startRowIndex = default(int), int maximumRows = default(int))
        {
            return _DatabaseContext.<#=entitySetName#>.Count();
        }

        #endregion

        #region Persistence (Create, Update, Delete) Methods

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual <#= GetPrimitiveType (primaryKey.TypeUsage.EdmType.Name) #> CreateNew<#=entity.Name#>(<#=entity.Name#> new<#=entity.Name#>)
        {
            // Validate Parameters 
            if (new<#=entity.Name#> == null)
                throw (new ArgumentNullException("new<#=entity.Name#>"));

	        // Apply business rules
            On<#=entity.Name#>Saving(new<#=entity.Name#>);
            On<#=entity.Name#>Creating(new<#=entity.Name#>);

            _DatabaseContext.<#=entitySetName#>.AddObject(new<#=entity.Name#>);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No <#=code.CamelCase(entity.Name)#> created!");

            // Apply business workflow
            On<#=entity.Name#>Created(new<#=entity.Name#>);
            On<#=entity.Name#>Saved(new<#=entity.Name#>);

            return new<#=entity.Name#>.<#=primaryKey.Name#>;
        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public void Update<#=entity.Name#>(<#=entity.Name#> updated<#=entity.Name#>)
        {
            // Validate Parameters
            if (updated<#=entity.Name#> == null)
                throw (new ArgumentNullException("updated<#=entity.Name#>"));

            // Validate Primary key value
            if (updated<#=entity.Name#>.<#=primaryKey.Name#>.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("<#=primaryKey.Name#>");

            // Apply business rules
            On<#=entity.Name#>Saving(updated<#=entity.Name#>);
            On<#=entity.Name#>Updating(updated<#=entity.Name#>);

            //attaching and making ready for parsistance
            if (updated<#=entity.Name#>.EntityState == EntityState.Detached)
                _DatabaseContext.<#=entitySetName#>.Attach(updated<#=entity.Name#>);
			_DatabaseContext.ObjectStateManager.ChangeObjectState(updated<#=entity.Name#>, System.Data.EntityState.Modified);//this line makes the code un-testable!
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No <#=code.CamelCase(entity.Name)#> updated!");

            //Apply business workflow
            On<#=entity.Name#>Updated(updated<#=entity.Name#>);
            On<#=entity.Name#>Saved(updated<#=entity.Name#>);

        }

        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public void Delete<#=entity.Name#>(<#=entity.Name#> <#=code.CamelCase(entity.Name)#>ToBeDeleted)
        {
            //Validate Input
            if (<#=code.CamelCase(entity.Name)#>ToBeDeleted == null)
                throw (new ArgumentNullException("<#=code.CamelCase(entity.Name)#>ToBeDeleted"));

            // Validate Primary key value
            if (<#=code.CamelCase(entity.Name)#>ToBeDeleted.<#=primaryKey.Name#>.IsInvalidKey())
                BusinessLayerHelper.ThrowErrorForInvalidDataKey("<#=primaryKey.Name#>");

            On<#=entity.Name#>Saving(<#=code.CamelCase(entity.Name)#>ToBeDeleted);
            On<#=entity.Name#>Deleting(<#=code.CamelCase(entity.Name)#>ToBeDeleted);

            if (<#=code.CamelCase(entity.Name)#>ToBeDeleted.EntityState == EntityState.Detached)
             _DatabaseContext.<#=entitySetName#>.Attach(<#=code.CamelCase(entity.Name)#>ToBeDeleted);
			_DatabaseContext.<#=entitySetName#>.DeleteObject(<#=code.CamelCase(entity.Name)#>ToBeDeleted);
            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows == 0) 
                throw new DataNotUpdatedException("No <#=entity.Name#> deleted!");
            
            On<#=entity.Name#>Deleted(<#=code.CamelCase(entity.Name)#>ToBeDeleted);
            On<#=entity.Name#>Saved(<#=code.CamelCase(entity.Name)#>ToBeDeleted);

        }

        public void Delete<#=entitySetName#>(List<<#= GetPrimitiveType (primaryKey.TypeUsage.EdmType.Name) #>> <#=code.CamelCase(primaryKey.Name)#>sToDelete)
        {
            //Validate Input
            foreach (<#= GetPrimitiveType (primaryKey.TypeUsage.EdmType.Name) #> <#=code.CamelCase(primaryKey.Name)#> in <#=code.CamelCase(primaryKey.Name)#>sToDelete)
                if (<#=code.CamelCase(primaryKey.Name)#>.IsInvalidKey())
                    BusinessLayerHelper.ThrowErrorForInvalidDataKey("<#=primaryKey.Name#>");

            List<<#=entity.Name#>> <#=code.CamelCase(entity.Name)#>sToBeDeleted = new List<<#=entity.Name#>>();

            foreach (<#= GetPrimitiveType (primaryKey.TypeUsage.EdmType.Name) #> <#=code.CamelCase(primaryKey.Name)#> in <#=code.CamelCase(primaryKey.Name)#>sToDelete)
            {
                <#=entity.Name#> <#=code.CamelCase(entity.Name)#> = new <#=entity.Name#> { <#=code.Escape(primaryKey.Name)#> = <#=code.CamelCase(primaryKey.Name)#> };
                _DatabaseContext.<#=entitySetName#>.Attach(<#=code.CamelCase(entity.Name)#>);
				_DatabaseContext.<#=entitySetName#>.DeleteObject(<#=code.CamelCase(entity.Name)#>);
                <#=code.CamelCase(entity.Name)#>sToBeDeleted.Add(<#=code.CamelCase(entity.Name)#>);
                On<#=entity.Name#>Deleting(<#=code.CamelCase(entity.Name)#>);
            }

            int numberOfAffectedRows = _DatabaseContext.SaveChanges();
            if (numberOfAffectedRows != <#=code.CamelCase(primaryKey.Name)#>sToDelete.Count) 
                throw new DataNotUpdatedException("One or more <#=code.CamelCase(entity.Name)#> records have not been deleted.");
            foreach (<#=entity.Name#> <#=code.CamelCase(entity.Name)#>ToBeDeleted in <#=code.CamelCase(entity.Name)#>sToBeDeleted)
                On<#=entity.Name#>Deleted(<#=code.CamelCase(entity.Name)#>ToBeDeleted);
        }

        #endregion
	
	}
}
<# 
} 
fileManager.Process(true);
#>	

<#+


/*********************************************************************
					- HELPER METHODS -
**********************************************************************/ 

string GetPrimitiveType (string type)
{
	
	switch (type)
	{
		case "Int32": return "int";
	    case "String": return "string";
		default: return type;
	}
}

string GetPrimitiveType (System.Data.Metadata.Edm.EdmProperty key)
{
	string type = GetPrimitiveType(key.TypeUsage.EdmType.Name);
	
	if (type != "string" && key.Nullable) return type + "?";
	
	return type;
	
}

#>
